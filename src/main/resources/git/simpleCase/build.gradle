plugins {
    id 'java'
    id 'java-library'
    id 'java-gradle-plugin'
}

allprojects {
    apply plugin: 'java-library'
    apply plugin: 'java-gradle-plugin'
    apply plugin: 'jacoco'
    sourceCompatibility = 1.8

    ext {
        powerMockVersion = "1.7.1"
    }
    repositories {
        mavenLocal()
        maven {
            url = 'http://mvn.finedevelop.com/repository/maven-public/'
        }
    }

    dependencies {
        testImplementation 'junit:junit:4.12'
        testImplementation 'org.assertj:assertj-core:3.13.2'
        testImplementation "org.powermock:powermock-module-junit4:${powerMockVersion}"
        testImplementation "org.powermock:powermock-core:${powerMockVersion}"
        testImplementation "org.powermock:powermock-api-mockito2:${powerMockVersion}"
        testImplementation 'org.easymock:easymock:3.5.1'
        testImplementation "org.powermock:powermock-api-easymock:${powerMockVersion}"
    }


    configurations {
        jacocoConfig
        jacocoRuntime
    }

    dependencies {
        api localGroovy()
        jacocoConfig group: 'org.jacoco', name: 'org.jacoco.ant', version: '0.8.4', classifier: 'nodeps'
        jacocoRuntime group: 'org.jacoco', name: 'org.jacoco.agent', version: '0.8.4', classifier: 'runtime'
    }

    task instrument(dependsOn: ['classes']) {
        ext.outputDir = buildDir.path + '/classes-instrumented'
        doLast {
            if (sourceSets.main.output.classesDirs.filter({ it.exists() }).isEmpty()) {
                return
            }
            ant.taskdef(name: 'instrument',
                    classname: 'org.jacoco.ant.InstrumentTask',
                    classpath: configurations.jacocoConfig.asPath)
            ant.instrument(destdir: outputDir) {
                sourceSets.main.output.classesDirs.each { fileset(dir: it) }
            }
        }
    }

    def jacocoDir = rootProject.buildDir.path + '/jacoco/' + project.name
    def jacocoExecPath = jacocoDir + '/jacoco.exec'

    test.dependsOn('instrument')
    gradle.taskGraph.whenReady { graph ->
        if (graph.hasTask(instrument)) {
            tasks.withType(Test) {
                doFirst {
                    systemProperty 'jacoco-agent.destfile', jacocoExecPath
                    classpath = files(instrument.outputDir) + classpath + configurations.jacocoRuntime
                }
            }
        }
    }

    jacocoTestReport {
        reports {
            csv.enabled false
            xml.enabled true
            html.enabled true
            xml.destination file("${jacocoDir}/jacoco.xml")
            html.destination file("${jacocoDir}/jacocoHtml")
        }
        executionData file(jacocoExecPath)
    }

    jacocoTestReport.onlyIf { file(jacocoExecPath).exists() }
    jacocoTestReport.dependsOn(['instrument', 'test'])

    test {
        jacoco {
            destinationFile = file(jacocoExecPath)
            classDumpDir = file("${jacocoDir}/classpathdumps")
        }
        ignoreFailures = true
    }
}
